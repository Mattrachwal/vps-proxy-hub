#!/bin/bash
# Debug version of add-peer-key.sh with robust yq parsing (v4, strenv) and verbose output

set -euo pipefail
umask 077   # keep new files private

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${CONFIG_FILE:-$SCRIPT_DIR/../config.yaml}"

PEER_NAME=""
PUBLIC_KEY=""

# Load shared utilities
source "$SCRIPT_DIR/../shared/utils.sh"

# Parse args
if [[ $# -ne 2 ]]; then
  echo "Usage: $0 <peer-name> <public-key>"
  exit 1
fi
PEER_NAME="$1"
PUBLIC_KEY="$2"

log "Starting debug session for peer: $PEER_NAME"
log "Public key: $PUBLIC_KEY"
log "Config file: $CONFIG_FILE"

# Check prerequisites
check_root
check_config
install_yq

# ---- Resolve main values from config ----
PEERS_DIR="$(get_config_value 'vps.wireguard.peers_dir' '/etc/wireguard/peers')"
VPS_PRIVATE_KEY_PATH="$(get_config_value 'vps.wireguard.private_key_path' '/etc/wireguard/vps-private.key')"
VPS_ADDRESS="$(get_config_value 'vps.wireguard.vps_address' '10.8.0.1/24')"
LISTEN_PORT="$(get_config_value 'vps.wireguard.listen_port' '51820')"

log "Peers directory: $PEERS_DIR"
log "VPS private key path: $VPS_PRIVATE_KEY_PATH"
log "VPS address: $VPS_ADDRESS"
log "Listen port: $LISTEN_PORT"

# ---- Verify peer exists in config ----
if ! validate_peer_name "$PEER_NAME"; then
  log_error "Peer $PEER_NAME not found in configuration"
  exit 1
fi

if command -v yq &> /dev/null; then
  peer_addr="$(yq eval ".peers[] | select(.name == \"$PEER_NAME\") | .address" "$CONFIG_FILE")"
  peer_keepalive="$(yq eval ".peers[] | select(.name == \"$PEER_NAME\") | .keepalive" "$CONFIG_FILE")"
else
  peer_addr="$(get_peer_config "$PEER_NAME" "address")"
  peer_keepalive="$(get_peer_config "$PEER_NAME" "keepalive" "25")"
fi
# Default keepalive if null
if [[ "$peer_keepalive" == "null" || -z "$peer_keepalive" ]]; then
  peer_keepalive="25"
fi

log "Peer address: $peer_addr"
log "Peer keepalive: $peer_keepalive"

# ---- Prepare peers directory and key file ----
mkdir -p "$PEERS_DIR"
chmod 700 "$PEERS_DIR"
log "Created/verified peers directory: $PEERS_DIR"

echo "$PUBLIC_KEY" > "$PEERS_DIR/${PEER_NAME}.pub"
chmod 600 "$PEERS_DIR/${PEER_NAME}.pub"
log_success "Saved public key: $PEERS_DIR/${PEER_NAME}.pub"

# ---- Check VPS private key ----
if [[ ! -f "$VPS_PRIVATE_KEY_PATH" ]]; then
  log_error "VPS private key not found: $VPS_PRIVATE_KEY_PATH"
  echo "Generate with:"
  echo "  sudo sh -c 'wg genkey | tee $VPS_PRIVATE_KEY_PATH | wg pubkey > /etc/wireguard/vps-public.key'"
  exit 1
fi

VPS_PRIVATE_KEY="$(cat "$VPS_PRIVATE_KEY_PATH")"
log "VPS private key loaded (length: ${#VPS_PRIVATE_KEY} chars)"

# ---- Build wg0.conf ----
WG_CONF="/etc/wireguard/wg0.conf"
log "Building WireGuard configuration: $WG_CONF"

if [[ -f "$WG_CONF" ]]; then
  cp "$WG_CONF" "/etc/wireguard/wg0.conf.backup.$(date +%Y%m%d_%H%M%S)"
  log "Backed up existing wg0.conf"
fi

cat > "$WG_CONF" <<EOF
# VPS WireGuard Configuration
# Generated by add-peer-key.sh

[Interface]
PrivateKey = $VPS_PRIVATE_KEY
Address    = $VPS_ADDRESS
ListenPort = $LISTEN_PORT
SaveConfig = false

# Enable packet forwarding and NAT
PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o \$(ip route show default | awk '/default/ { print \$5 ; exit }') -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o \$(ip route show default | awk '/default/ { print \$5 ; exit }') -j MASQUERADE

EOF
log "Base configuration written"

# ---- Append peers from $PEERS_DIR/*.pub that exist in config ----
PEERS_ADDED=0
shopt -s nullglob
log "DEBUG: Looking for .pub files in $PEERS_DIR"
for keyfile in "$PEERS_DIR"/*.pub; do
  log "DEBUG: Found keyfile: $keyfile"
  [[ -f "$keyfile" ]] || continue
  PK="$(cat "$keyfile")"
  NAME="$(basename "$keyfile" .pub)"

  log "Processing peer: $NAME"

  if command -v yq &> /dev/null; then
    ADDR="$(yq eval ".peers[] | select(.name == \"$NAME\") | .address" "$CONFIG_FILE")"
    KA="$(yq eval ".peers[] | select(.name == \"$NAME\") | .keepalive" "$CONFIG_FILE")"
    log "DEBUG: yq returned ADDR='$ADDR', KA='$KA'"
  else
    ADDR="$(get_peer_config "$NAME" "address")"
    KA="$(get_peer_config "$NAME" "keepalive" "25")"
    log "DEBUG: fallback returned ADDR='$ADDR', KA='$KA'"
  fi
  
  # Set defaults if not specified (same as VPS setup)
  KA=${KA:-25}
  log "DEBUG: Final values - ADDR='$ADDR', KA='$KA'"
  
  if [[ -z "$ADDR" || "$ADDR" == "null" ]]; then
    log_warning "Skipping peer $NAME: address not found in config.yaml"
    continue
  fi

  log "DEBUG: About to write peer config - PK='$PK', NAME='$NAME'"
  log "DEBUG: Writing to WG_CONF='$WG_CONF'"
  
  cat >> "$WG_CONF" <<EOF

# Peer: $NAME
[Peer]
PublicKey           = $PK
AllowedIPs          = $ADDR
PersistentKeepalive = $KA
EOF

  log "DEBUG: Finished writing peer config"
  ((PEERS_ADDED++))
  log_success "Added peer: $NAME ($ADDR)"
done
log "DEBUG: Finished processing all peers, PEERS_ADDED=$PEERS_ADDED"
shopt -u nullglob

log "DEBUG: About to chmod $WG_CONF"
chmod 600 "$WG_CONF"
log "DEBUG: chmod completed"
log "Set permissions on $WG_CONF"

log "DEBUG: Checking PEERS_ADDED count: $PEERS_ADDED"
if (( PEERS_ADDED == 0 )); then
  log_warning "No peers added to configuration!"
else
  log_success "Added $PEERS_ADDED peer(s) to configuration"
fi

# ---- Validate and restart WireGuard ----
log "DEBUG: Starting WireGuard validation section"
log "Testing WireGuard configuration..."
log "DEBUG: About to run: wg-quick strip wg0"
if wg-quick strip wg0 >/dev/null 2>&1; then
  log_success "Configuration syntax is valid"
else
  log_error "Configuration syntax error!"
  exit 1
fi

echo
log_success "Configuration updated successfully. Restarting WireGuard service..."

if systemctl is-active --quiet wg-quick@wg0; then
  log "Stopping WireGuard service..."
  systemctl stop wg-quick@wg0 && log_success "WireGuard service stopped"
  sleep 1
fi

log "Starting WireGuard service..."
if systemctl start wg-quick@wg0; then
  log_success "WireGuard service started"
else
  log_error "Failed to start WireGuard service"
  exit 1
fi
sleep 3

if systemctl is-active --quiet wg-quick@wg0; then
  log_success "WireGuard service is active and running"
  sleep 1
  log_success "Current WireGuard status:"
  wg show wg0 2>/dev/null || log_warning "wg show failed - interface may not be ready yet"
  log_success "WireGuard interface is working correctly - peer added and service restarted!"
else
  log_error "WireGuard failed to start. Check: journalctl -u wg-quick@wg0"
  exit 1
fi

log_success "Peer $PEER_NAME added successfully!"
